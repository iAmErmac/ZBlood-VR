
Class BloodActorZ : Actor
{
	action void A_ReplaceSprite(String myvar, String ssprite)
	{
		CVar readsetting = CVar.FindCVar(myvar);

		if (readsetting && readsetting.GetInt()==1)
		{
			sprite = GetSpriteIndex(ssprite);
		}
	}
}

Class MonsterBurnEffect : Inventory
{
	Int timeout;
	bool selfTimeout;
	Int pain_countdown;
	bool pain_death;

	Default
	{
	Inventory.Amount 1;
	Inventory.MaxAmount 1;
	}
	
	override void PostBeginPlay()
	{
		selfTimeout = true;
		pain_countdown = random(3,7) * 35;
		pain_death = false;
	}
	
	override void DoEffect()
	{
		if(!owner || owner.player || owner.bNoblood || owner.radius > 100) 
		{
			destroy();
			return;
		}
		
		if(owner.FindInventory("PainBurnToken"))
		{
			painful_burn_owner();
			return;
		}
		
		if(owner && !pain_death && (owner.health <= 1 || owner.InStateSequence(owner.CurState, owner.ResolveState("Death"))) )
		{
			//if(owner.bNogravity || owner.bFloat || owner.radius > 29)
				init_pain_burn();
			//else
				//burn_owner();
		}
		
		if(timeout < 92)
			timeout++;
		else if(selfTimeout)
			destroy();
	}
	
	/*
	void burn_owner()
	{
		if(!owner.InStateSequence(owner.CurState, owner.ResolveState("Burn")) && !owner.InStateSequence(owner.CurState, owner.ResolveState("Death.Flare")) && !owner.InStateSequence(owner.CurState, owner.ResolveState("Death.Fire")) && !owner.InStateSequence(owner.CurState, owner.ResolveState("Death.SpecialFire")) && owner.health <= 0)
		{
			Actor.Spawn("BurningMonster", owner.pos);
			owner.destroy();
		}
	}
	*/
	
	void init_pain_burn()
	{
		if(owner.InStateSequence(owner.CurState, owner.ResolveState("Burn")) || owner.InStateSequence(owner.CurState, owner.ResolveState("Death.Flare")) || owner.InStateSequence(owner.CurState, owner.ResolveState("Death.Fire")) || owner.InStateSequence(owner.CurState, owner.ResolveState("Death.SpecialFire")))
		{
			return;
		}		
	
		owner.SetInventory("PainBurnToken", 1);
		selfTimeout = false;
		owner.A_SetHealth(1000);
		
		let burn_tint = Actor.Spawn("BurningMonsterTint", owner.pos);
		burn_tint.master = owner;
		owner.bSolid = true;
		owner.bBright = true;
		owner.speed *= frandom(1.2, 2.0);
	}
	
	void painful_burn_owner()
	{
		if(pain_countdown < 0)
		{
			pain_death = true;
			Actor.Spawn("BurntMonsterCorpse", owner.pos);
			owner.destroy();
			return;
		}
		
		pain_countdown--;
		if(pain_countdown % 5 == 0)
		{
			let dist = owner.radius * 2 / 3;
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,16);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,32);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,48);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,64);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,80);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,96);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,112);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,128);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,160);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,192);
			owner.A_Explode(4,24,0);
		}
		
		let random_pain_chance = random(3,5) * 3;
		
		if(pain_countdown % random_pain_chance == 0)
		{
			owner.A_AlertMonsters();
			owner.SetStateLabel("Pain");
		}
		
		//do a little aoe damage every 3 tics
		if(pain_countdown % 3 == 0)
		{
			area_burn();
		}
	}
	
	void area_burn()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(owner, 512);
		Actor mo, victim;
		Array<Actor> victims;

		while (it.Next())
		{
			mo = it.thing; // Get the Actor it's currently on
			if (!mo || !mo.bSolid || Distance2D(mo) > 512)
			   continue;

			victims.push(mo);
		}
	
		for(int i=0; i<victims.Size(); i++)
		{
			victim = victims[i];
			if(victim.FindInventory("PainBurnToken")) return;
			
			victim.SetInventory("MonsterBurnEffect", 0);
			victim.SetInventory("MonsterBurnEffect", 1);
		}
		
		owner.A_Explode(4,64,0);
	}
}

/*
Class BurningMonster : Actor
{
	Default
	{
	//+FLOAT
	//+NOGRAVITY
	//+SPAWNFLOAT
	+DONTOVERLAP
    +FIREDAMAGE
    +RANDOMIZE
    +DONTSPLASH
    +FLOORCLIP
    +LOOKALLAROUND
	-COUNTKILL
    Radius 16;
    Height 56;
    Speed 4;
	Scale 0.65;
    damagetype "SpecialFire";
    Obituary "%o was near someone in flames.";
    activesound "himp/pain";
	}
	
    States
    {
    Spawn:
        FGUY K 0 A_KillMaster;
        FGUY K 0 A_AlertMonsters;
        FGUY K 3 Bright A_Look;
        goto See;
    See:
        FGUY K 0   A_PlaySound("himp/sight");
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/pain");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/sight");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/pain");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/sight");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/pain");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/sight");
        FGUY AAA 1 Bright  A_Wander;
        FGUY K 0   ;//A_LoopActiveSound
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        FGUY CCC 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY DDD 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY K 0   A_PlaySound("himp/pain");
        FGUY AAA 1 Bright  A_Wander;
		FGUY K 0   A_Jump(160,"See");
        FGUY K 0   A_SpawnItem ("BFireTrail",8+random(-5,5),58+random(-5,5),0,0);
        FGUY K 0   A_Explode (4,24,0);
        FGUY BBB 1 Bright  A_Wander;
        FGUY K 0   A_SpawnItem ("BurningAlive");
        FGUY K 0   A_Explode (4,24,0);
        Goto Death;
    Death:
		FGUY K 0 A_StopSound;
        FGUY KKKKK 0 A_SpawnDebris("FlyingBlood");
        FGUY K 0 A_SpawnDebris("NapalmDebris");
        FGUY K 0 A_Gravity;
        FGUY K 0 A_Fall;
        FGUY KKK 3 Bright  A_SpawnItem("BFireTrail",8+random(-5,5),20+random(-5,5));
        FGUY K 3 Bright  A_SpawnItem ("BFireTrail2",8+random(-5,5),20+random(-5,5));
        FGUY K 3 Bright  A_SpawnItem ("BFireTrail",8+random(-5,5),20+random(-5,5));
        FGUY O 0 A_Fall;
        FGUY K 0 A_PlaySound("himp/death");
        FGUY LLMMNNOOPP 3 Bright;
        FGUY K 0 Bright A_SpawnItem ("BurnDeathSmoke");
	FloorCorpse:
        FGUT T 1 A_Fall;
		FGUT T 9 A_Fadeout(0.05);
        Loop;
    }
}
*/

Class PainBurnToken : Inventory
{
	Default
	{
	Inventory.Amount 1;
	Inventory.MaxAmount 1;
	}
}

Class BurningMonsterTint : Actor
{
	Default
	{
	renderstyle "Stencil";
	StencilColor "e4 74 38";
	Alpha 0.65;
	radius 1;
	height 1;
	+NOINTERACTION
	+BRIGHT
	-COUNTKILL
	}
	
	override void Tick()
	{   
		if (!master || master.health <= 0)
		{
			destroy();
			return;
		}
		SetOrigin(master.pos,false);
		angle = master.angle;
		pitch = master.pitch;
		sprite = master.sprite;
		frame = master.frame;
		scale = master.scale;
		bFLOORCLIP = master.bFLOORCLIP;
		bSPRITEFLIP = master.bSPRITEFLIP;
	}
	states
	{
	Spawn:
		#### # 1;
		loop;
	}
}

Class BurntMonsterCorpse : Actor
{
	Default
	{
	//+NOINTERACTION
    +FLOORCLIP
	+FLOAT
	+NOGRAVITY
	+SPAWNFLOAT
	+NOBLOCKMAP
	-COUNTKILL
	radius 1;
	height 1;
	}
	
	States
	{
	Spawn:
        TNT1 AAAAA 0 A_SpawnDebris("FlyingBlood");
        TNT1 A 0 A_SpawnDebris("NapalmDebris");
        TNT1 AAAAAAAA 0 A_SpawnDebris("FlyingBlood");
		FGUY H 3 Bright A_SpawnItem("BFireTrail",8+random(-5,5),20+random(-5,5));
        TNT1 A 0 A_Gravity;
        TNT1 A 0 A_Fall;
		FGUY IJKK 3 Bright A_SpawnItem("BFireTrail",8+random(-5,5),20+random(-5,5));
        TNT1 A 0 A_PlaySound("himp/death");
        FGUY LL 3 Bright A_TossGib;
        FGUY MMNNOOPP 3 Bright;
        TNT1 A 0 A_SpawnItem("BurnDeathSmoke");
	FloorCorpse:
		FGUT T 10 A_Fadeout(0.05);
        Loop;
	}
}