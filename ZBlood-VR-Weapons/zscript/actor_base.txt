
Class BloodActorZ : Actor
{
	action void A_ReplaceSprite(String myvar, String ssprite)
	{
		CVar readsetting = CVar.FindCVar(myvar);

		if (readsetting && readsetting.GetInt()==1)
		{
			sprite = GetSpriteIndex(ssprite);
		}
	}
}

Class MonsterBurnEffect : Inventory
{
	Int timeout;
	bool self_timeout;
	Int pain_countdown;
	bool pain_death;
	bool is_blood_enemy;
	bool start_burning;

	Default
	{
	Inventory.Amount 1;
	Inventory.MaxAmount 1;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!Cvar.FindCvar("zblood_burnall").GetBool())
		{
			destroy();
			return;
		}
		
		self_timeout = true;
		pain_countdown = random(3,7) * 35;
		pain_death = false;
		is_blood_enemy = isBloodEnemy(owner);
	}
	
	override void DoEffect()
	{
		if(!owner || owner.player || owner.bNoblood || owner.bNoicedeath || owner.radius > 100 || owner.bBoss || is_blood_enemy)
		{
			destroy();
			return;
		}
	
		if(owner.FindInventory("PainBurnToken"))
		{
			painfulBurnOwner();
			return;
		}
		
		if(timeout < 92)
			timeout++;
		else if(self_timeout)
			destroy();
			
		Super.DoEffect();
	}
	
	private bool isBloodEnemy(Actor mo)
	{
		Array<String> blood_enemies = {
			"bloodzombie", "bluecultist", "greycultist", "greencultist", "browncultist", "moron", "bloodrat", "bonefish", "bloatedbutcher", "chokinghand", "bracedhand", "chrysalidpod", "lavapod", "lavabarf", "hellrosebramblered", 
			"spidermother", "spidermother2", "spidermother3", "spiderred", "newspiderred", "newredspider", "greenspider", "spiderblue", "bluespider", "spideryellow", "yellowspider", "spiderpurple", "purplespider", "spidercyan", "spiderblack", "blackspider", "spiderwhite", "whitespider",
			"bloodgargoyle", "bloodgargoyle3", "cheogh", "statuecheogh", "statuegargoyle", "gillbeast", "hammerhaunt", "hellhound", "phantasm", "cerberus", "tchernobog"
		};
	
		String actor_class = mo.GetClassName();
		actor_class = actor_class.MakeLower();
		for(int i=0; i < blood_enemies.Size(); i++)
		{
			if(actor_class.IndexOf(blood_enemies[i]) != -1)
			{
				return true;
				break;
			}
		}
		return false;
	}
	
	private void painfulBurnOwner()
	{
		if(!owner) return;
		
		if(!start_burning)
		{
			//if there are existing burn animations let them play that
			let burnstate1 = owner.FindState('Burn');
			let burnstate2 = owner.FindState('Death.Burn');
			let burnstate3 = owner.FindState('Death.Fire');
			let burnstate4 = owner.FindState('Death.Flame');
			let burnstate5 = owner.FindState('Death.Flare');
			let burnstate6 = owner.FindState('Death.SpecialFire');
			let deathstate = owner.FindState('Death');
			bool has_burnstate = true;
			if(burnstate1 != deathstate && burnstate1 != NULL)
				owner.SetState(burnstate1);
			else if(burnstate2 != deathstate && burnstate2 != NULL)
				owner.SetState(burnstate2);
			else if(burnstate3 != deathstate && burnstate3 != NULL)
				owner.SetState(burnstate3);
			else if(burnstate4 != deathstate && burnstate4 != NULL)
				owner.SetState(burnstate4);
			else if(burnstate5 != deathstate && burnstate5 != NULL)
				owner.SetState(burnstate5);
			else if(burnstate6 != deathstate && burnstate6 != NULL)
				owner.SetState(burnstate6);
			else
				has_burnstate = false;
				
			if(has_burnstate)
			{
				destroy();
				return;
			}
			
			//or we start making our own universal burn sequence
			self_timeout = false;
			let burn_tint = Actor.Spawn("BurningMonsterTint", owner.pos);
			burn_tint.master = owner;
			start_burning = true;
		}
		
		if(pain_countdown < 0)
		{
			pain_death = true;
			Actor.Spawn("BurntMonsterCorpse", owner.pos);
			owner.destroy();
			return;
		}
		
		pain_countdown--;
		if(pain_countdown % 5 == 0)
		{
			let dist = owner.radius * 2 / 3;
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,16);
			owner.A_SpawnItemEx("BFireTrail2",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,32);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,48);
			owner.A_SpawnItemEx("BFireTrail2",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,64);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,80);
			owner.A_SpawnItemEx("BFireTrail2",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,96);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,112);
			owner.A_SpawnItemEx("BFireTrail2",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,128);
			owner.A_SpawnItemEx("BFireTrail",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,160);
			owner.A_SpawnItemEx("BFireTrail2",dist*random(-1,1),dist*random(-1,1),58*frandom(0.1,1.5),random(-1,1),random(-1,1),random(1,3),0,0,192);
			owner.A_SpawnDebris("NapalmDebris");
			owner.A_Explode(4,24,0);
		}
		
		if(!owner.InStateSequence(owner.CurState, owner.ResolveState("See"))) owner.SetStateLabel("See"); //don't let get to attack state, make it wander
		
		let random_pain_chance = random(3,5) * 3;
		
		if(pain_countdown % random_pain_chance == 0)
		{
			owner.A_AlertMonsters();
			owner.SetStateLabel("Pain");
		}
		
		//do a little aoe damage every 0.5 sec
		if(pain_countdown % 18 == 0)
		{
			areaBurn();
		}
	}
	
	private void areaBurn()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(owner, 512);
		Actor mo, victim;
		Array<Actor> victims;

		while (it.Next())
		{
			mo = it.thing; // Get the Actor it's currently on
			if (!mo || !mo.bSolid || Distance2D(mo) > 512)
			   continue;

			victims.push(mo);
		}
	
		for(int i=0; i<victims.Size(); i++)
		{
			victim = victims[i];
			if(victim.FindInventory("PainBurnToken")) return;
			
			victim.SetInventory("MonsterBurnEffect", 0);
			victim.SetInventory("MonsterBurnEffect", 1);
		}
		
		owner.A_Explode(4,64,0);
	}
}

Class PainBurnToken : Inventory
{
	Default
	{
	Inventory.Amount 1;
	Inventory.MaxAmount 1;
	}
}

Class BurningMonsterTint : Actor
{
	Default
	{
	renderstyle "Stencil";
	StencilColor "e4 74 38";
	Alpha 0.65;
	radius 1;
	height 1;
	+NOINTERACTION
	+BRIGHT
	-COUNTKILL
	}
	
	override void PostBeginPlay()
	{
		if (!master || master.health <= 0)
		{
			destroy();
			return;
		}
		glow_helper = Actor.Spawn("BurningGlow", master.pos);
	}
	
	override void Tick()
	{  
		Super.TIck();
		if (!master || master.health <= 0)
		{
			glow_helper.A_RemoveLight("BurningGlow1");
			glow_helper.destroy();
			destroy();
			return;
		}
		angle = master.angle;
		pitch = master.pitch;
		sprite = master.sprite;
		frame = master.frame;
		scale = master.scale;
		bFLOORCLIP = master.bFLOORCLIP;
		bSPRITEFLIP = master.bSPRITEFLIP;
		SetOrigin(master.pos,false);
		glow_helper.SetOrigin(master.pos,false);
	}
	states
	{
	Spawn:
		#### # 1;
		loop;
	}
	
	private actor glow_helper;
}

Class BurningGlow : BulletPuff
{
	Default
	{
	+FLOAT
	+NOGRAVITY
	+SPAWNFLOAT
	+NOBLOCKMAP
	-COUNTKILL
	radius 1;
	height 1;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_AttachLightDef("BurningGlow1", "BURNINGGUY2");
		TNT1 A 1;
		wait;
	}
}

Class BurntMonsterCorpse : Actor
{
	Default
	{
	//+NOINTERACTION
    +FLOORCLIP
	+FLOAT
	+NOGRAVITY
	+SPAWNFLOAT
	+NOBLOCKMAP
	-COUNTKILL
	radius 1;
	height 1;
	Scale 0.5;
	}
	
	States
	{
	Spawn:
        TNT1 AAAAA 0 A_SpawnDebris("FlyingBlood");
        TNT1 A 0 A_SpawnDebris("NapalmDebris");
        TNT1 AAAAAAAA 0 A_SpawnDebris("FlyingBlood");
		FGUY H 3 Bright A_SpawnItem("BFireTrail",8+random(-5,5),20+random(-5,5));
        TNT1 A 0 A_Gravity;
        TNT1 A 0 A_Fall;
		FGUY IJKK 3 Bright A_SpawnItem("BFireTrail",8+random(-5,5),20+random(-5,5));
        TNT1 A 0 A_PlaySound("himp/death");
        FGUY LL 3 Bright A_TossGib;
        FGUY MMNNOOPP 3 Bright;
        TNT1 A 0 A_SpawnItem("BurnDeathSmoke");
	FloorCorpse:
		FGUT T 10 A_Fadeout(0.05);
        Loop;
	}
}

Class BloodMonsterHelper : EventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		_isTitlemap = CheckTitlemap();
		if (_isTitlemap) return;
		
		if(!Cvar.FindCvar("zblood_monsters").GetBool()) return;
		
		if(e.Replacee is "DeadZombieMan") 			e.Replacement = 'DeadACultist';
		if(e.Replacee is "ZombieMan") 				e.Replacement = 'GreenCultist';
		if(e.Replacee is "DeadShotgunGuy") 			e.Replacement = 'DeadCultist';
		if(e.Replacee is "ShotgunGuy") 				e.Replacement = 'BrownCultist';
		if(e.Replacee is "ChaingunGuy") 			e.Replacement = 'GreyCultist';
		if(e.Replacee is "DoomImp") 				e.Replacement = 'BloodGargoyle3';
		if(e.Replacee is "DeadDemon") 				e.Replacement = 'DeadZombie';
		if(e.Replacee is "Demon") 					e.Replacement = 'BloodZombie';
		if(e.Replacee is "Spectre") 				e.Replacement = 'HammerHaunt';
		if(e.Replacee is "LostSoul") 				e.Replacement = 'BloodRat';
		if(e.Replacee is "Cacodemon") 				e.Replacement = 'GillBeast';
		if(e.Replacee is "DeadCacodemon") 			e.Replacement = 'DeadGillBeast';
		if(e.Replacee is "HellKnight") 				e.Replacement = 'HellHound';
		if(e.Replacee is "Revenant") 				e.Replacement = 'BloatedButcher';
		if(e.Replacee is "PainElemental") 			e.Replacement = 'Phantasm';
		if(e.Replacee is "Fatso") 					e.Replacement = 'MancubusReplacer';
		if(e.Replacee is "BloodyTwitch") 			e.Replacement = 'SpiderMummy';
		if(e.Replacee is "Arachnotron") 			e.Replacement = 'SpiderMother';
		if(e.Replacee is "BaronOfHell") 			e.Replacement = 'BloodGargoyle';
		if(e.Replacee is "ArchVile") 				e.Replacement = 'DangerousWorld';
		if(e.Replacee is "Cyberdemon") 				e.Replacement = 'Cerberus';
		if(e.Replacee is "SpiderMasterMind") 		e.Replacement = 'Tchernobog';
		if(e.Replacee is "WolfensteinSS") 			e.Replacement = 'DangerousWorld';
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		_isTitlemap = CheckTitlemap();
		if (_isTitlemap) return;
		
		if(!Cvar.FindCvar("zblood_burnall").GetBool()) return;
		
		let dead_thing = e.thing;
		
		if(dead_thing.FindInventory("MonsterBurnEffect"))
		{
			let mo = Actor.Spawn(dead_thing.GetClassName(), e.thing.pos);
			dead_thing.destroy();
			mo.SetInventory("MonsterBurnEffect", 1);
			mo.SetInventory("PainBurnToken", 1);
			mo.bBright = true;
			mo.bBUDDHA = true;
			mo.bGHOST = true;
			mo.bSHOOTABLE = false;
			mo.bNOTELEPORT = true;
			mo.bFRIGHTENED = true;
			mo.bCOUNTKILL = false;
			mo.bCORPSE = true;
			mo.bALWAYSFAST = true;
			//mo.speed *= frandom(1.2, 1.8);
		}
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private bool _isTitlemap;
}