
Class ZBItemDropEvent : EventHandler
{
	/*override void WorldThingDied(WorldEvent e)
	{
		if(e.thing && e.thing.bIsMonster && !e.thing.bNoBlood)
		{
			String mo_class = e.thing.GetClassName();
			mo_class = mo_class.MakeLower();
			
			for(int i = 0; i < blood_enemies.Size(); i++) {
				if(mo_class == blood_enemies[i]) {
					return;
					break;
				}
			}
		
			if(e.thing is "ZombieMan" || e.thing is "ShotgunGuy" || e.thing is "DoomImp" || e.thing is "Demon" || e.thing is "ChaingunGuy")
			{
				if(random(0,10) > 9) e.thing.A_Dropitem("UselessStuff");
			}
		}
	}*/
	
	//must replace all custom weapons and ammo drops
	override void WorldThingSpawned(WorldEvent e)
	{
		let player = Players[ConsolePlayer].mo;
		let spawned_thing = e.Thing;
		
		//if Akimbo disabled them replace the powerup with something else
		if(!Cvar.FindCvar("zblood_akimbo").GetBool() && (spawned_thing is "GunsAkimbo" || spawned_thing is "Berserk"))
		{
			if(random(0,3) > 2)
				Actor.Spawn("ReflectiveShots", spawned_thing.pos);
			else
				Actor.Spawn("Sawedoff", spawned_thing.pos);
			spawned_thing.Destroy();
			return;
		}
	
		//do no replace drops from heretic/hexen/strife. they will be handled by filter lumps
		if((GameInfo.GameType & GAME_Heretic) || (GameInfo.GameType & GAME_Hexen) || (GameInfo.GameType & GAME_Strife)) return;
		
		bool custom_drop_replace = Cvar.FindCvar("zblood_drop_replace").GetBool();
	
		String pickup_class = spawned_thing.GetClassName();
		pickup_class = pickup_class.MakeLower();
		
		for(int i = 0; i < ZB_pickup_list.Size(); i++) {
			if(spawned_thing && pickup_class == ZB_pickup_list[i]) {
				return;
				break;
			}
		}
		
		//now try to match weapons based on parent class
		if(spawned_thing is "weapon")
		{
			bool weapon_replaced;
			if(spawned_thing is "supershotgun" || pickup_class.IndexOf("supershotgun") >= 0 || pickup_class.IndexOf("ssg") >= 0 || pickup_class.IndexOf("sawed") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("sawedoff", 1);
				else
					Actor.Spawn("sawedoff", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "shotgun" || pickup_class.IndexOf("shotgun") >= 0 || pickup_class.IndexOf("shotty") >= 0 || pickup_class.IndexOf("boomstick") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("flaregun", 1);
				else
					Actor.Spawn("flaregun", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "rocketlauncher" || pickup_class.IndexOf("rpg") >= 0 || pickup_class.IndexOf("rocket") >= 0 || pickup_class.IndexOf("missile") >= 0 || pickup_class.IndexOf("grenade") >= 0 || pickup_class.IndexOf("flak") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("napalmlauncher", 1);
				else
					Actor.Spawn("napalmlauncher", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "plasmarifle" || pickup_class.IndexOf("plasma") >= 0 || pickup_class.IndexOf("laser") >= 0 || pickup_class.IndexOf("flame") >= 0 || pickup_class.IndexOf("lightning") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("spraycan", 1);
				else
					Actor.Spawn("spraycan", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "bfg9000" || pickup_class.IndexOf("bfg") >= 0 || pickup_class.IndexOf("blackhole") >= 0 || pickup_class.IndexOf("mass") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("lifeleech", 1);
				else
					Actor.Spawn("lifeleech", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "chaingun" || pickup_class.IndexOf("chaingun") >= 0 || pickup_class.IndexOf("machinegun") >= 0 || pickup_class.IndexOf("smg") >= 0 || pickup_class.IndexOf("assault") >= 0 || pickup_class.IndexOf("rifle") >= 0 || pickup_class.IndexOf("mp") >= 0 || pickup_class.IndexOf("machine") >= 0 || pickup_class.IndexOf("carbine") >= 0 || pickup_class.IndexOf("ak47") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("tommygun", 1);
				else
					Actor.Spawn("tommygun", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "pistol" || pickup_class.IndexOf("pistol") >= 0 || pickup_class.IndexOf("magnum") >= 0 || pickup_class.IndexOf("colt") >= 0 || pickup_class.IndexOf("berreta") >= 0 || pickup_class.IndexOf("luger") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("flaregun", 1);
				else
					Actor.Spawn("flaregun", spawned_thing.pos);
				weapon_replaced = true;
			}
			else if(spawned_thing is "chainsaw" || pickup_class.IndexOf("saw") >= 0 || pickup_class.IndexOf("grind") >= 0)
			{
				if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
					player.GiveInventory("dynamite", 1);
				else
					Actor.Spawn("dynamite", spawned_thing.pos);
				weapon_replaced = true;
			}
			if(weapon_replaced)
			{
				spawned_thing.Destroy();
				return;
			}
		}
		
		if(spawned_thing is "Ammo" || spawned_thing is "Weapon")
		{
			//if this thing is given by the game into iventory destroy it immediately
			if(spawned_thing.bNoBlockmap && spawned_thing.bNoSector && Inventory(spawned_thing).owner && Inventory(spawned_thing).owner is "PlayerPawn")
			{
				spawned_thing.Destroy();
				return;
			}
		
			//Remove all custom ammo or weapon from inventory
			let invitem = Inventory(spawned_thing);
			if(invitem.owner && invitem.owner is "PlayerPawn" && (spawned_thing is "Ammo" || spawned_thing is "Weapon")) {
				invitem.owner.RemoveInventory(invitem);
			}
			
			if(custom_drop_replace)
			{
				//Replace all spawned custom weapon and ammo
				if(spawned_thing is "Weapon") { spawned_thing.Spawn("UnknownWeaponReplacer", spawned_thing.pos); }
				if(spawned_thing is "Ammo") { spawned_thing.Spawn("UnknownAmmoReplacer", spawned_thing.pos); }
			}
			
			spawned_thing.Destroy();
		}
	}
	
	static const string ZB_pickup_list[] = {
	
		//weapons
		"pitchfork",
		"pitchfork2",
		"flaregun",
		"flaregun2",
		"sawedoff",
		"sawedoff2",
		"tommygun",
		"tommygun2",
		"napalmlauncher",
		"napalmlauncher2",
		"tntbundle",
		"dynamite",
		"remotebombpickup",
		"remotedynamite",
		"proximitydynamite",
		"proximitydetonator",
		"spraycan",
		"spraycanisterpickup",
		"teslarifle",
		"teslarifle2",
		"lifeleechbuddy",
		"lifeleech",
		"voodoodollpickup",
		"voodoodoll",
		"offhandvoodoodoll",
		"zippo",
		"caleboffhandfist",
		"bombremote",
		
		//ammo
		"flares",
		"flarebox2",
		"flarebox3",
		"spraycanister2",
		"shell2",
		"bulletbox2",
		"gasolinecan",
		"gasolinecanpickup",
		"dtntammo",
		"tntammo",
		"tntammobox",
		"dtntbox",
		"happybundle",
		"rtntbox",
		"rtntammo",
		"proxscan",
		"spraycanister",
		"teslacharge",
		"cellpickup",
		"essencepower",
		"trappedsoul",
		"voodoo",
		
		//pickups
		"medicinepouch",
		"bodyarmor",
		"bodyarmorpickup",
		"basicarmorpickup2",
		"firearmorpickup",
		"superarmorpickup",
		"bodyarmorpickuplower",
		"firearmorpickuplower",
		"spiritarmorpickuplower",
		"firearmor",
		"spiritarmor",
		"hearthealth",
		"hearthealth2",
		"hearthealth3",
		"hearthealth4",
		"hearthealth5",
		"hearthealth6",
		"hearthealth7",
		"hearthealth8",
		"hearthealth9",
		"hearthealth10",
		"hearthealth11",
		"hearthealth12",
		"hearthealth13",
		"hearthealth14",
		"hearthealth15",
		"hearthealth16",
		"hearthealth17",
		"hearthealth18",
		"hearthealth19",
		"hearthealth20",
		"hearthealth21",
		"hearthealth22",
		"hearthealth23",
		"hearthealth24",
		"hearthealth25",
		"hearthealth26",
		"hearthealth27",
		"hearthealth28",
		"hearthealth29",
		"hearthealth30",
		"hearthealth31",
		"hearthealth32",
		"hearthealth33",
		"hearthealth34",
		"hearthealth35",
		"hearthealth36",
		"hearthealth37",
		"hearthealth38",
		"hearthealth39",
		"hearthealth40",
		"hearthealth41",
		"hearthealth42",
		"hearthealth43",
		"hearthealth44",
		"hearthealth45",
		"hearthealth46",
		"uselessstuff",
		"jumpingboots",
		"jumpboots",
		"reflectiveshots",
		"divingsuit",
		"divingsuit2",
		"beastvision",
		"deathmask",
		"gunsakimbo",
		"doctorbag",
		
		//custom spawners
		"HeartHealthFrag",
		"ArmorFrag",
		"FireArmorFrag",
		"SpiritArmorFrag",
		"ArmorFragSpawner",
		"StimpackSpawner",
		"BasicAmmoPack",
		"AdvancedAmmoPack",
		"RandomAmmoPack",
		"BasicArsenalDrop",
		"AdvancedArsenalDrop",
		"NoArsenalDrop",
		"UnknownAmmoReplacer",
		"UnknownWeaponReplacer",
		
		//custom spawners for heretic/hexen
		"flarefunspawner",
		"sawedoffspawner",
		"tommygunspawner",
		"spraycanspawner",
		"teslariflespawner",
		"napalmspawner",
		"lifeleechspawner",
		"voodoodollspawner",
		"flareshellspawner",
		"flareboxspawner",
		"flarebox2spawner",
		"bulletspawner",
		"bulletboxspawner",
		"shellspawner",
		"shellbundlespawner",
		"gasolinecanspawner",
		"spraycanisterspawner",
		"cellpickupspawner",
		"essencepowerspawner",
		"trappedsoulspawner",
		"tntspawner",
		"tntboxspawner",
		"proxybombspawner",
		"proxybombboxspawner",
		"remotebombspawner",
		"happytntbundle",
		"happyammopack",
		"deathmaskspawner",
		"reflectiveshotsspawner",
		"divingsuitspawner",
		"jumpingbootspawner",
		"gunsakimbospawner",
		"beastvisionspawner",
		"cloakofshadow",
		"lifeseed",
		"armorfragment",
		"firearmorfragment",
		"spiritarmorfragment",
		"armorfragmentspawner",
		"smallarmordrop",
		"smallfirearmordrop",
		"smallspiritarmordrop",
		"smallarmorspawner",
		"bigarmorspawner",
		"superarmorspawner",
		"extraitemdrop",
		"basicarsenalspawner",
		"advancedarsenalspawner",
		"basicammospawner",
		"advancedammospawner",
		"healthvialspawner",
		"amuletspawner",
		"helmspawner",
		"shieldspawner",
		"mesharmorspawner",
		"porkalatorspawner",
		"superhealthspawner",
		"sittingcorpsespawner",
		"sleepingcorpsespawner",
		"barrelloots",
		
		//helper items
		"usingpitchfork",
		"chokeme",
		"throwpower",
		"throwpowerbig",
		"boombaby",
		"basicarmor",
		"hexenarmor",
		
		//default starter items
		"clip",
		"clipbox",
		"shell",
		"shellbox",
		"rocketammo",
		"cell",
		"goldwandammo",
		"crossbowammo",
		"maceammo",
		"blasterammo",
		"skullrodammo",
		"phoenixrodammo",
		"mana1",
		"mana2",
		"hegrenaderounds",
		"phosphorusgrenaderounds",
		"clipofbullets",
		"minimissiles",
		"energypod",
		"poisonbolts",
		"electricbolts"
	};
	
	static const string blood_enemies[] = {
			"bloodzombie", "bluecultist", "greycultist", "greencultist", "browncultist", "moron", "bloodrat", "bloodratspawner", "bonefish", "bloatedbutcher", "chokinghand", "bracedhand", "chrysalidpod", "lavapod", "lavabarf", "hellrosebramblered", 
			"spidermother", "spidermother2", "spidermother3", "spiderred", "newspiderred", "newredspider", "greenspider", "spiderblue", "bluespider", "spideryellow", "yellowspider", "spiderpurple", "purplespider", "spidercyan", "spiderblack", "blackspider", "spiderwhite", "whitespider",
			"bloodgargoyle", "bloodgargoyle3", "cheogh", "statuecheogh", "statuegargoyle", "gillbeast", "hammerhaunt", "hellhound", "phantasm", "cerberus", "tchernobog"
		};
}