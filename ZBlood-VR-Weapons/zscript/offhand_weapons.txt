
Class BloodOffhandWeaponHandler : EventHandler
{
	
	override void WorldTick()
	{
		if (_isTitlemap) { return; } //we dont need to initiate the mod if it's a titlemap
		
		PlayerInfo player = players[consolePlayer];
		if (player == null) { return; }
		
		HandleOffhandAutoSwitchWeapon();
		HandleSprayCanIgnition();
		HandleAkimbo();
		
		if(player.mo.CountInv("RemoteDynamite") && !player.mo.CountInv("BombRemote")) player.mo.setinventory("BombRemote", 1, false); //Give player remote when picking up remote bombs
		
		if(!player.OffhandWeapon)
		{
			Weapon weap = Weapon(player.mo.FindInventory(prevWeapon));
			if(weap)
			{
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
		}
		
		if(voodoo_cursor && !(player.OffhandWeapon is "OfhandVoodooDoll")) voodoo_cursor.bInvisible = true;
		
		if (_isInitialized) return;
		
		//Initialization part
		
		if(!player.mo.CountInv("Zippo")) player.mo.setinventory("Zippo", 1, false); //Give player lighter
		
		if(!player.mo.CountInv("CalebOffHandFist")) player.mo.setinventory("CalebOffHandFist", 1, false); //Give player off-hand fist weapon
		
		Weapon weap = Weapon(player.mo.FindInventory("CalebOffHandFist"));
		player.OffhandWeapon = weap;
		player.PendingWeapon = weap;
		player.mo.BringUpWeapon();
		
		voodoo_cursor = Actor.Spawn("voodooTargetIcon");
		
		_isInitialized = true;
	}
	
	void HandleOffhandAutoSwitchWeapon()
	{
		PlayerInfo player = players[consolePlayer];
		
		if((player.ReadyWeapon IS "Dynamite" || player.ReadyWeapon IS "Spraycan") && !(player.OffhandWeapon IS "Zippo"))
		{
			player.mo.setinventory("PutOutFlame", 1, false);
			Weapon weap = Weapon(player.mo.FindInventory("Zippo"));
			player.OffhandWeapon = weap;
			player.PendingWeapon = weap;
			player.mo.BringUpWeapon();
		}
		
		if(player.ReadyWeapon IS "RemoteDynamite")
		{
			if(!player.mo.CountInv("BombRemote")) player.mo.setinventory("BombRemote", 1, false);
			
			if(!(player.OffhandWeapon IS "BombRemote"))
			{
				Weapon weap = Weapon(player.mo.FindInventory("BombRemote"));
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
		}
		
		if(player.ReadyWeapon IS "VoodooDoll")
		{
			if(!(player.OffhandWeapon is "OfhandVoodooDoll")) prevWeapon = player.OffhandWeapon.GetClassName();
		
			if(!player.mo.CountInv("OfhandVoodooDoll")) player.mo.setinventory("OfhandVoodooDoll", 1, false);
			
			if(!(player.OffhandWeapon IS "OfhandVoodooDoll"))
			{
				Weapon weap = Weapon(player.mo.FindInventory("OfhandVoodooDoll"));
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
			
			markVoodooTargets();
		}
		else
		{
			player.mo.setinventory("OfhandVoodooDoll", 0, false);
			player.mo.setinventory("VoodooSpellCasted", 0, false);
		}
	}
	
	void HandleSprayCanIgnition()
	{
		PlayerInfo player = players[consolePlayer];
		if(player.ReadyWeapon IS "Spraycan" && player.mo.CountInv("IgnitingSprayCan"))
		{
			if(!tiny_flame) tiny_flame = Actor.Spawn("SpraycanFlameIgnite", player.mo.AttackPos);
			tiny_flame.SetOrigin(player.mo.AttackPos, true);
		}
		else
			tiny_flame = NULL;
	}
	
	void markVoodooTargets()
	{
		let player = players[consolePlayer].mo;
		if(!player) return;
		
		if(!player.CountInv("OfhandVoodooDoll")) return;
		
		voodoo_cursor.bInvisible = true;
		
		let VoodooWeapon = OfhandVoodooDoll(player.FindInventory("OfhandVoodooDoll"));
		player.target = NULL;
		VoodooWeapon.voodoo_target = NULL;
		
		double pitch = player.AimTarget() ? player.BulletSlope(null, ALF_PORTALRESTRICT) : player.pitch;
		FLineTraceData t;
		bool hit = player.LineTrace(player.angle, 2048, pitch, offsetz: player.height-12, data: t);
		if (hit && t.HitType == TRACE_HitActor && !Actor(t.HitActor).bInvulnerable && t.HitActor.bSolid && t.HitActor.health > 0)
		{
			double distance = t.Distance;
			voodoo_cursor.scale.x    = 3.0;
			voodoo_cursor.scale.y    = 3.0;
			voodoo_cursor.bInvisible = false;
			voodoo_cursor.SetOrigin(t.HitLocation, true);
			VoodooWeapon.voodoo_target = t.HitActor;
		}
	}
	
	void HandleAkimbo()
	{
		Playerinfo player = players[consolePlayer];
		if(!player) return;
		
		console.printf(""..(player.ReadyWeapon && player.ReadyWeapon.bNoHandSwitch ? 0 : 1));
		Weapon weap;
		
		if(!player.mo.CountInv("PowerTargeter"))
		{
			if(player.OffhandWeapon is "FlareGun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("FlareGun2", 0, false);
			weap = Weapon(player.mo.FindInventory("FlareGun"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
			return;
		}
		
		if(player.OffhandWeapon && !(player.OffhandWeapon is "FlareGun"))
		{
			prevWeapon = player.OffhandWeapon.GetClassName();
		}
		
		//When Akimbo powerup is activated
		
		if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "FlareGun")
		{
			weap = Weapon(player.mo.FindInventory("FlareGun"));
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
			player.mo.A_SelectWeapon("FlareGun");
		}
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "FlareGun")
		{
			if(!player.mo.CountInv("FlareGun2")) player.mo.SetInventory("FlareGun2", 1, false);
			player.OffhandWeapon = Weapon(player.mo.FindInventory("FlareGun2"));
			weap = Weapon(player.mo.FindInventory("FlareGun"));
			if(weap && !weap.bNoHandSwitch) weap.bNoHandSwitch = true;
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "FlareGun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("FlareGun2", 0, false);
		}
	}
	
	override void OnRegister()
	{
		_isInitialized = false;
	}

	override void WorldLoaded(WorldEvent event)
	{
		_isTitlemap = CheckTitlemap();
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private bool _isTitlemap;
	private bool _isInitialized;
	private actor tiny_flame;
	private actor voodoo_cursor;
	Class<Weapon> prevWeapon;
}

Class HapticHelper : EventHandler
{
	static void BuzzHand(int hand = 0)
	{
		Let player = Players[ConsolePlayer].mo;
		if(!player) return;
		
		player.LineAttack(0, 0, 0, 1, "melee", "hapticDummy", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | (hand ? LAF_ISOFFHAND : 0));
	}
	
	static void Buzz()
	{
		HapticHelper.BuzzHand();
		HapticHelper.BuzzHand(1);
	}
	
	static void BuzzOffhand()
	{
		HapticHelper.BuzzHand(1);
	}
}

Class IgnitingSprayCan : Inventory
{
	Default
	{
	inventory.maxamount 1;
	}
}

Class SpraycanFlameIgnite : Actor
{
	Default
	{
	+NOBLOCKMAP;
	+NOGRAVITY;
	+ALLOWPARTICLES;
	+RANDOMIZE;
	+BRIGHT;
	Renderstyle "Add";
	Alpha 1;
	Speed 0;
    VSpeed 0;
	}
	
	States
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetScale(0.03);
		SFLM A 2;
		TNT1 A 0 A_SetScale(0.04);
		SFLM B 2;
		TNT1 A 0 A_SetScale(0.05);
		SFLM C 2;
		TNT1 A 0 A_SetScale(0.06);
		SFLM D 2;
		TNT1 A 0 A_SetScale(0.07);
		SFLM E 2;
		TNT1 A 0 A_SetScale(0.08);
		SFLM F 2;
		TNT1 A 0 A_SetScale(0.09);
		SFLM GA 2;
		Stop;
	}
}

class testPuff : Actor
{
  Default
  {
    Mass        0;
    Radius      1;
    Height      2;

    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
	+NOTARGET;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
    +SKYEXPLODE;
  }

  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1 A_SpawnParticle("FF 00 00", SPF_FULLBRIGHT, 1, 2, 0, 0, 0, 0);
      stop;
  }
}

Class testPuffBig : testPuff
{
  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1 A_SpawnParticle("FF 00 00", SPF_FULLBRIGHT, 175, 10, 0, 0, 0, 0);
      stop;
  }
}

class bloodDummyPuff : Actor
{
  Default
  {
    Mass        0;
    Radius      1;
    Height      2;

    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
	+NOTARGET;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
    +SKYEXPLODE;
  }

  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1;
      stop;
  }
}

class voodooTargetIcon : bloodDummyPuff
{
  Default
  {
  Renderstyle "Add";
  }
  States
  {
    Spawn:
      TNT1 A 0;
      VCUR A 1;
      Wait;
  }

}

class hapticDummy : bloodDummyPuff
{
  Default
  {
	DamageType "Melee";
	Damage 1;
  }
}