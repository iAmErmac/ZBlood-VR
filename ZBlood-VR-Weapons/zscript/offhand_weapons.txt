
Class BloodOffhandWeaponHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		PlayerInfo player = players[e.PlayerNumber];
		if(!player) return;
		
		player.mo.SetInventory("ZippoOpen", 0);
		player.mo.SetInventory("PutOutFlame", 0);
	}

	override void WorldTick()
	{
		if (_isTitlemap) { return; } //we dont need to initiate the mod if it's a titlemap
		
		PlayerInfo player = players[consolePlayer];
		if (player == null || player.mo.health < 1) { return; }
		
		if(!voodoo_cursor) voodoo_cursor = Actor.Spawn("voodooTargetIcon");
		if(!(player.OffhandWeapon is "OffhandVoodooDoll")) voodoo_cursor.bInvisible = true;
		
		if(player.mo.CountInv("RemoteDynamite") && !player.mo.CountInv("BombRemote")) player.mo.setinventory("BombRemote", 1, false); //Give player remote when picking up remote bombs
		if(!player.mo.CountInv("Zippo")) player.mo.setinventory("Zippo", 1, false); //Give player lighter
		if(!player.mo.CountInv("CalebOffHandFist")) player.mo.setinventory("CalebOffHandFist", 1, false); //Give player off-hand fist weapon
		
		HandleOffhandAutoSwitchWeapon();
		HandleSprayCanIgnition();
		HandleAkimbo();
		
		let zb_gvar = ZBGlobalVar.Get();
		if(player.OffhandWeapon) zb_gvar.last_offhandweapon = player.OffhandWeapon.GetClassName();
		
		if (_isInitialized) return;
		
		//Initialization part
		
		let get_gvar = ZBGlobalVar.Get();
		Weapon weap;
		if(get_gvar.last_offhandweapon.length() > 0)
		{
			weap = Weapon(player.mo.FindInventory(get_gvar.last_offhandweapon));
		}
		else
		{
			weap = Weapon(player.mo.FindInventory("CalebOffHandFist"));
		}
		
		if(weap)
		{
			player.OffhandWeapon = weap;
			player.PendingWeapon = weap;
			player.mo.BringUpWeapon();
		}
		
		_isInitialized = true;
	}
	
	void HandleOffhandAutoSwitchWeapon()
	{
		PlayerInfo player = players[consolePlayer];
		
		if((player.ReadyWeapon IS "Dynamite" || player.ReadyWeapon IS "Spraycan") && !(player.OffhandWeapon IS "Zippo"))
		{
			player.mo.setinventory("PutOutFlame", 1, false);
			Weapon weap = Weapon(player.mo.FindInventory("Zippo"));
			player.OffhandWeapon = weap;
			player.PendingWeapon = weap;
			player.mo.BringUpWeapon();
		}
		
		if(player.ReadyWeapon IS "RemoteDynamite")
		{
			if(!player.mo.CountInv("BombRemote")) player.mo.setinventory("BombRemote", 1, false);
			
			if(!(player.OffhandWeapon IS "BombRemote"))
			{
				Weapon weap = Weapon(player.mo.FindInventory("BombRemote"));
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
		}
		
		if(player.ReadyWeapon IS "VoodooDoll")
		{
			if(!(player.OffhandWeapon is "OffhandVoodooDoll")) prevWeapon = player.OffhandWeapon.GetClassName();
		
			if(!player.mo.CountInv("OffhandVoodooDoll")) player.mo.setinventory("OffhandVoodooDoll", 1, false);
			
			if(!(player.OffhandWeapon IS "OffhandVoodooDoll"))
			{
				Weapon weap = Weapon(player.mo.FindInventory("OffhandVoodooDoll"));
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
			
			markVoodooTargets();
		}
		else
		{
			player.mo.setinventory("OffhandVoodooDoll", 0, false);
			player.mo.setinventory("VoodooSpellCasted", 0, false);
		}
	}
	
	void HandleSprayCanIgnition()
	{
		PlayerInfo player = players[consolePlayer];
		if(player.ReadyWeapon IS "Spraycan" && player.mo.CountInv("IgnitingSprayCan"))
		{
			if(!tiny_flame) tiny_flame = Actor.Spawn("SpraycanFlameIgnite", player.mo.AttackPos);
			tiny_flame.SetOrigin(player.mo.AttackPos, true);
		}
		else
			tiny_flame = NULL;
	}
	
	void markVoodooTargets()
	{
		let player = players[consolePlayer].mo;
		if(!player) return;
		
		if(!player.CountInv("OffhandVoodooDoll") || !voodoo_cursor) return;
		
		voodoo_cursor.bInvisible = true;
		
		let VoodooWeapon = OffhandVoodooDoll(player.FindInventory("OffhandVoodooDoll"));
		player.target = NULL;
		VoodooWeapon.voodoo_target = NULL;
		
		double pitch = player.AimTarget() ? player.BulletSlope(null, ALF_PORTALRESTRICT) : player.pitch;
		FLineTraceData t;
		bool hit = player.LineTrace(player.angle, 2048, pitch, offsetz: player.height-12, data: t);
		if (hit && t.HitType == TRACE_HitActor && !Actor(t.HitActor).bInvulnerable && t.HitActor.bSolid && t.HitActor.health > 0)
		{
			double distance = t.Distance;
			voodoo_cursor.scale.x    = 3.0;
			voodoo_cursor.scale.y    = 3.0;
			voodoo_cursor.bInvisible = false;
			voodoo_cursor.SetOrigin(t.HitLocation, true);
			VoodooWeapon.voodoo_target = t.HitActor;
		}
	}
	
	void HandleAkimbo()
	{
		Playerinfo player = players[consolePlayer];
		if(!player) return;
		
		if(!Cvar.FindCvar("zblood_akimbo").GetBool()) return;
		
		Weapon weap;
		
		if(!player.mo.CountInv("PowerTargeter"))
		{
			if(player.OffhandWeapon is "FlareGun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("FlareGun2", 0, false);
			
			if(player.OffhandWeapon is "Sawedoff2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("Sawedoff2", 0, false);
			
			if(player.OffhandWeapon is "Tommygun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("Tommygun2", 0, false);
			
			if(player.OffhandWeapon is "NapalmLauncher2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("NapalmLauncher2", 0, false);
			
			if(player.OffhandWeapon is "TeslaRifle2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("TeslaRifle2", 0, false);
		
			weap = Weapon(player.mo.FindInventory("FlareGun"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
			
			weap = Weapon(player.mo.FindInventory("Sawedoff"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
			
			weap = Weapon(player.mo.FindInventory("Tommygun"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
			
			weap = Weapon(player.mo.FindInventory("NapalmLauncher"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
			
			weap = Weapon(player.mo.FindInventory("TeslaRifle"));
			if(weap && weap.bNoHandSwitch) weap.bNoHandSwitch = false;
		
			if(!player.OffhandWeapon)
			{
				if(prevWeapon && player.mo.CountInv(prevWeapon))
					weap = Weapon(player.mo.FindInventory(prevWeapon));
				else
					weap = Weapon(player.mo.FindInventory("CalebOffHandFist"));
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				player.mo.BringUpWeapon();
			}
			
			init_akimbo = false;
			
			return;
		}
		
		//When Akimbo powerup is activated
		
		if(player.OffhandWeapon && !(player.OffhandWeapon is "FlareGun") && !(player.OffhandWeapon is "Sawedoff"))
			prevWeapon = player.OffhandWeapon.GetClassName();
		
		if(!init_akimbo) SetupAkimbo();
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "FlareGun")
		{
			if(!player.mo.CountInv("FlareGun2")) player.mo.SetInventory("FlareGun2", 1, false);
			if(!(player.OffhandWeapon is "FlareGun2"))
			{
				weap = Weapon(player.mo.FindInventory("FlareGun2"));
				player.OffhandWeapon = weap;
				player.mo.A_SelectWeapon("FlareGun2");
				player.SetPSprite(PSP_OFFHANDWEAPON, weap.FindState("Select"));
			}
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "FlareGun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("FlareGun2", 0, false);
		}
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "Sawedoff")
		{
			if(!player.mo.CountInv("Sawedoff2")) player.mo.SetInventory("Sawedoff2", 1, false);
			if(!(player.OffhandWeapon is "Sawedoff2"))
			{
				weap = Weapon(player.mo.FindInventory("Sawedoff2"));
				player.OffhandWeapon = weap;
				player.mo.A_SelectWeapon("Sawedoff2");
				player.SetPSprite(PSP_OFFHANDWEAPON, weap.FindState("Select"));
			}
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "Sawedoff2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("Sawedoff2", 0, false);
		}
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "Tommygun")
		{
			if(!player.mo.CountInv("Tommygun2")) player.mo.SetInventory("Tommygun2", 1, false);
			if(!(player.OffhandWeapon is "Tommygun2"))
			{
				weap = Weapon(player.mo.FindInventory("Tommygun2"));
				player.OffhandWeapon = weap;
				player.mo.A_SelectWeapon("Tommygun2");
				player.SetPSprite(PSP_OFFHANDWEAPON, weap.FindState("Select"));
			}
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "Tommygun2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("Tommygun2", 0, false);
		}
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "NapalmLauncher")
		{
			if(!player.mo.CountInv("NapalmLauncher2")) player.mo.SetInventory("NapalmLauncher2", 1, false);
			if(!(player.OffhandWeapon is "TeslaRifle"))
			{
				weap = Weapon(player.mo.FindInventory("NapalmLauncher2"));
				player.OffhandWeapon = weap;
				player.mo.A_SelectWeapon("NapalmLauncher2");
				player.SetPSprite(PSP_OFFHANDWEAPON, weap.FindState("Select"));
			}
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "NapalmLauncher2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("NapalmLauncher2", 0, false);
		}
		
		if(player.ReadyWeapon && player.ReadyWeapon.GetClassName() ==  "TeslaRifle")
		{
			if(!player.mo.CountInv("TeslaRifle2")) player.mo.SetInventory("TeslaRifle2", 1, false);
			if(!(player.OffhandWeapon is "TeslaRifle2"))
			{
				weap = Weapon(player.mo.FindInventory("TeslaRifle2"));
				player.OffhandWeapon = weap;
				player.mo.A_SelectWeapon("TeslaRifle2");
				player.SetPSprite(PSP_OFFHANDWEAPON, weap.FindState("Select"));
			}
			
			ShowTeslaArcs();
		}
		else
		{
			if(player.OffhandWeapon && player.OffhandWeapon.GetClassName() == "TeslaRifle2") player.OffhandWeapon = NULL;
			player.mo.SetInventory("TeslaRifle2", 0, false);
		}
		
		if(!player.OffhandWeapon)
		{
			if(prevWeapon && player.mo.CountInv(prevWeapon))
				weap = Weapon(player.mo.FindInventory(prevWeapon));
			else
				weap = Weapon(player.mo.FindInventory("CalebOffHandFist"));
			player.OffhandWeapon = weap;
			player.PendingWeapon = weap;
			player.mo.BringUpWeapon();
		}
	}
	
	void SetupAkimbo()
	{
		Playerinfo player = players[consolePlayer];
		if(!player) return;
		
		Weapon weap;
		
		weap = Weapon(player.mo.FindInventory("FlareGun"));
		if(weap && weap.bOffhandWeapon)
		{
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
		}
		
		weap = Weapon(player.mo.FindInventory("Sawedoff"));
		if(weap && weap.bOffhandWeapon)
		{
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
		}
		
		weap = Weapon(player.mo.FindInventory("Tommygun"));
		if(weap && weap.bOffhandWeapon)
		{
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
		}
		
		weap = Weapon(player.mo.FindInventory("NapalmLauncher"));
		if(weap && weap.bOffhandWeapon)
		{
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
		}
		
		weap = Weapon(player.mo.FindInventory("TeslaRifle"));
		if(weap && weap.bOffhandWeapon)
		{
			weap.bOffhandWeapon = false;
			weap.bNoHandSwitch = true;
		}
		
		player.OffhandWeapon = player.PendingWeapon = NULL;
		
		init_akimbo = true;
	}
	
	//hacky way to show an arcing "sprite" between both hand weapons
	//the sprite here is actually a 2D model so we can rotate it to angle between hands
	void ShowTeslaArcs()
	{
		Playerinfo plr = players[consolePlayer];
		Let player = plr.mo;
		if(!player) return;
		
		//show the electric arc only when certain weapon sprites are loaded
		String curSpite, curSpite2;
		if(plr.ReadyWeapon) curSpite = ""..plr.GetPSprite(PSP_WEAPON).Sprite;
		if(plr.OffhandWeapon) curSpite2 = ""..plr.GetPSprite(PSP_OFFHANDWEAPON).Sprite;
		if(!(curSpite == "TES2" || curSpite == "TES3" || curSpite == "TS2V" || curSpite == "TS3V" || curSpite2 == "TES2" || curSpite2 == "TES3" || curSpite2 == "TS2V" || curSpite2 == "TS3V")) return;
		
		//find the two points to arc over
		Double angle = player.angle;
		Double pitch = player.AimTarget() ? player.BulletSlope(null, ALF_PORTALRESTRICT) : player.pitch;
		let tempPuff1 = player.LineAttack(angle, 10, pitch, 0, "none", "bloodDummyPuff", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ);
		let tempPuff2 = player.LineAttack(angle, 10, pitch, 0, "none", "bloodDummyPuff", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | LAF_ISOFFHAND);
		
		double hand_dist = level.vec3diff(tempPuff1.pos, tempPuff2.pos).length();
		
		let tesla_arc = Actor.Spawn("TeslaArc", tempPuff1.pos); //this actor shows as electric arc
		let offhand_dummy = Actor.Spawn("bloodDummyPuff", tempPuff2.pos); //dummy actor for angle and pitch reference
		
		tesla_arc.A_SetScale(hand_dist/14); //scale the arc based on hand distance
		tesla_arc.A_SetAngle(tesla_arc.AngleTo(offhand_dummy)); //make sure always arcing at the correct angle
		tesla_arc.A_SetPitch(GetPitchTo(tesla_arc, offhand_dummy)); //make sure always arcing at the correct pitch
		
		//get rid of the placeholder actors
		tempPuff1.destroy();
		tempPuff2.destroy();
		offhand_dummy.destroy();
	}
	
	double GetPitchTo(Actor source, Actor target, double zOfs = 0, double targZOfs = 0, bool absolute = false)
	{
		Vector3 origin = (source.pos.xy, source.pos.z - source.floorClip + zOfs);
		Vector3 dest = (target.pos.xy, target.pos.z - target.floorClip + targZOfs);

		Vector3 diff;
		if (!absolute)
			diff = level.Vec3Diff(origin, dest);
		else
			diff = dest - origin;

		return -atan2(diff.z, diff.xy.Length());
	}
	
	override void OnRegister()
	{
		_isInitialized = false;
	}

	override void WorldLoaded(WorldEvent event)
	{
		_isTitlemap = CheckTitlemap();
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private bool _isTitlemap;
	private bool _isInitialized;
	private actor tiny_flame;
	private actor voodoo_cursor;
	private Class<Weapon> prevWeapon;
	private bool init_akimbo;
	private string last_offhandweapon;
}

class ZBGlobalVar : Thinker
{
	string last_offhandweapon;

	ZBGlobalVar Init()
	{
		last_offhandweapon = "";
		ChangeStatNum(STAT_STATIC);
		return self;
	}

	static ZBGlobalVar Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("ZBGlobalVar", STAT_STATIC);
		let p = ZBGlobalVar(it.Next());
		if (p == null)
		{
			p = new("ZBGlobalVar").Init();
		}
		return p;
	}
}

Class HapticHelper : EventHandler
{
	static void BuzzHand(int hand = 0)
	{
		Let player = Players[ConsolePlayer].mo;
		if(!player || player.health < 1) return;
		
		player.LineAttack(0, 0, 0, 1, "melee", "hapticDummy", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | (hand ? LAF_ISOFFHAND : 0));
	}
	
	static void Buzz()
	{
		HapticHelper.BuzzHand();
		HapticHelper.BuzzHand(1);
	}
	
	static void BuzzOffhand()
	{
		HapticHelper.BuzzHand(1);
	}
	
	static void BuzzWeapon(Weapon weap)
	{
		if(!weap || !weap.owner) return;
		
		int hand = weap.bOffhandWeapon ? 1 : 0;
		HapticHelper.BuzzHand(hand);
	}
}

Class IgnitingSprayCan : Inventory
{
	Default
	{
	inventory.maxamount 1;
	}
}

Class SpraycanFlameIgnite : Actor
{
	Default
	{
	+NOBLOCKMAP;
	+NOGRAVITY;
	+ALLOWPARTICLES;
	+RANDOMIZE;
	+BRIGHT;
	Renderstyle "Add";
	Alpha 1;
	Speed 0;
    VSpeed 0;
	}
	
	States
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetScale(0.03);
		SFLM A 2;
		TNT1 A 0 A_SetScale(0.04);
		SFLM B 2;
		TNT1 A 0 A_SetScale(0.05);
		SFLM C 2;
		TNT1 A 0 A_SetScale(0.06);
		SFLM D 2;
		TNT1 A 0 A_SetScale(0.07);
		SFLM E 2;
		TNT1 A 0 A_SetScale(0.08);
		SFLM F 2;
		TNT1 A 0 A_SetScale(0.09);
		SFLM GA 2;
		Stop;
	}
}

class testPuff : Actor
{
  Default
  {
    Mass        0;
    Radius      1;
    Height      2;

    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
	+NOTARGET;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
    +SKYEXPLODE;
  }

  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1 A_SpawnParticle("FF 00 00", SPF_FULLBRIGHT, 1, 2, 0, 0, 0, 0);
      stop;
  }
}

Class testPuffBig : testPuff
{
  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1 A_SpawnParticle("FF 00 00", SPF_FULLBRIGHT, 175, 10, 0, 0, 0, 0);
      stop;
  }
}

class bloodDummyPuff : Actor
{
  Default
  {
    Mass        0;
    Radius      1;
    Height      2;

    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
	+NOTARGET;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
    +SKYEXPLODE;
  }

  States
  {
    Spawn:
      TNT1 A 0;
      TNT1 A 1;
      stop;
  }
}

class voodooTargetIcon : bloodDummyPuff
{
  Default
  {
  Renderstyle "Add";
  }
  States
  {
    Spawn:
      TNT1 A 0;
      VCUR A 1;
      Wait;
  }

}

class hapticDummy : bloodDummyPuff
{
  Default
  {
	DamageType "Melee";
	Damage 1;
  }
}